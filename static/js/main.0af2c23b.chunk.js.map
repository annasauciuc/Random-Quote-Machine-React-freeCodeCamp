{"version":3,"sources":["logo.svg","data/quotes.js","components/Quote/Quote.js","services/getQuote.js","components/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","quotes","id","text","author","Quote","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","setState","hue","Math","floor","random","index","document","getElementById","innerText","querySelector","style","background","color","_this2","react_default","a","createElement","Fragment","className","href","onClick","quoteHandler","Component","Layout","components_Quote_Quote","App","components_Layout_Layout","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0af2c23b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const quotes = [\r\n  {\r\n    id: 1,\r\n    text: \"Either write something worth reading or do something worth writing.\",\r\n    author: \"Benjamin Franklin\"\r\n  },\r\n  {\r\n    id: 2,\r\n    text: \"The only way to do great work is to love what you do.\",\r\n    author: \"Steve Jobs\"\r\n  },\r\n  {\r\n    id: 3,\r\n    text:\"I’ve learned that people will forget what you said, people will forget what you did, but people will never forget how you made them feel.\",\r\n    author: \"Maya Angelou\"\r\n  },\r\n  {\r\n    id: 4,\r\n    text:\"It’s your place in the world; it’s your life. Go on and do all you can with it, and make it the life you want to live.\",\r\n    author: \"Mae Jemison\"\r\n  },\r\n  {\r\n    id: 5,\r\n    text: \"Teach thy tongue to say, “I do not know,” and thous shalt progress.\",\r\n    author: \"Maimonides\"\r\n  },\r\n  {\r\n    id: 6,\r\n    text:\"Life is not measured by the number of breaths we take, but by the moments that take our breath away.\",\r\n    author: \"Maya Angelou\"\r\n  }\r\n];\r\nexport default quotes;\r\n","import React, { Component } from \"react\";\r\nimport { getQuote } from \"./../../services/getQuote\";\r\nimport \"./Quote.css\";\r\n\r\nclass Quote extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      quotes: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ quotes: getQuote() });\r\n  }\r\n  quoteHandler() {\r\n    const { quotes } = this.state;\r\n\r\n    const hue =\r\n      \"rgb(\" +\r\n      Math.floor(Math.random() * 256) +\r\n      \", \" +\r\n      Math.floor(Math.random() * 256) +\r\n      \", \" +\r\n      Math.floor(Math.random() * 256) +\r\n      \")\";\r\n    const index = Math.floor(Math.random() * 5) + 0;\r\n\r\n    document.getElementById(\"text\").innerText = quotes[index].text;\r\n    document.getElementById(\"author\").innerText = quotes[index].author;\r\n    document.querySelector(\".wrapper\").style.background = hue;\r\n    document.getElementById(\"text\").style.color = hue;\r\n    document.getElementById(\"new-quote\").style.background = hue;\r\n    document.getElementById(\"tumblr\").style.background = hue;\r\n    document.getElementById(\"tweet-quote\").style.background = hue;\r\n    document.getElementById(\"author\").style.color = hue;\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"wrapper\" id=\"quote-box\">\r\n          <div className=\"card p-5 centered col-xs-12 col-sm-6 col-md-6\">\r\n            <div className=\" d-\">\r\n              <blockquote className=\"h5 text-center pb-4\" id=\"text\">\r\n                {\" \"}\r\n                Either write something worth reading or do something worth\r\n                writing.{\" \"}\r\n              </blockquote>\r\n              <footer className=\" pt-3 text-right\">\r\n                {\" \"}\r\n                <cite id=\"author\" className=\" pt-3  text-right\">\r\n                  Benjamin Franklin\r\n                </cite>{\" \"}\r\n              </footer>\r\n            </div>\r\n            <div className=\"d-flex pt-2\">\r\n              <a\r\n                id=\"tweet-quote\"\r\n                className=\"mr-1  initialColor btn  text-white \"\r\n                href=\"twitter.com/intent/tweet\"\r\n              >\r\n                {\" \"}\r\n                <i className=\"devicon-twitter-plain\" />\r\n              </a>\r\n              <button\r\n                id=\"tumblr\"\r\n                className=\"initialColor btn px-3    text-white\"\r\n              >\r\n                <i className=\"fab fa-tumblr\" />\r\n              </button>\r\n              <button\r\n                onClick={() => this.quoteHandler()}\r\n                className=\"ml-auto initialColor btn text-white\"\r\n                id=\"new-quote\"\r\n              >\r\n                New Quote\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Quote;\r\n","import quotes from \"../data/quotes\";\r\n\r\nconst getQuote = () => {\r\n  return quotes;\r\n};\r\n\r\nexport { getQuote };\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./Layout.css\";\r\nimport Quote from \"./../Quote/Quote\";\r\n\r\nclass Layout extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Quote />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Layout;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Quote from './components/Quote/Quote'\nimport Layout from './components/Layout/Layout';\n\nclass App extends Component {\n  render() {\n    return (\n      <Layout></Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"normalize.css\";\nimport './index.css';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}